<?php
/**
 * 产品类
 * Created by PhpStorm.
 * User: 小宝
 * Date: 2017年9月11日
 * Time: 14:40
 */
namespace app\api\controller;

use \app\common\controller\ApiBase;

class Product extends ApiBase{

    //初始化
    public function _initialize(){
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取产品分类接口
     * 1、接收parent_id
     *  1.1 为空返回提示
     * 2、读取数据
     */
    public function getProductCategory(){
        $data = $this->request->only(['parent_id']);

        //验证空值
        $result = $this->validate($data,'Product.product_cate');
        if($result!==true)
            return json(['data' => [],'code' => '201','msg' => $result]);

        //条件
        $temp = [
            'parent_id' => $data['parent_id'],
            'status' => '1'
        ];

        //读取数据
        $cate_data = db('category')->where($temp)->order('id desc')->select();
        if(empty($cate_data))
            return json(['data' => [],'code' => '201','msg' => '数据为空']);

        return json(['data' => $cate_data,'code' => '201','msg' => '获取成功']);
    }

    /**
     * 根据分类获取产品接口
     * 1、接收分类id
     * @param $cate_id  分类id
     */
    public function getProductList(){
        $data = $this->request->only(['parent_id','limit','page','keyword']);

        //验证空值
        $result = $this->validate($data,'Product.product_list');
        if($result!==true)
            return json(['data' => [],'code' => '201','msg' => $result]);

        //父级id为空
        if((isset($data['parent_id']) && !empty($data['parent_id'])) || $data['parent_id']!='0' )
            $temp['cate_id'] = $data['parent_id'];
        $temp['status'] = '1';

        //搜索关键字
        if(isset($data['keyword']) && !empty($data['keyword']))
            $temp['pro_name'] = ['like','%'.$data['keyword'].'%'];

        //读取数据
        $pro_data = db('product')->where($temp)->order('id desc')->page($data['page'],$data['limit'])->select();
        if(empty($pro_data))
            return json(['data' => [],'code' => '201','msg' => '数据为空']);

        return json(['data' => $pro_data,'code' => '201','msg' => '获取成功']);
    }

    /**
     * 删除商品
     * 根据接收到的id  进行数据库数据的删除处理
     * 1、验证空值
     *  1.1 为空返回提示
     * 2、验证数据是否存在
     *  2.1 不存在返回提示
     * 3、执行删除
     */
    public function delProduct(){
        $data = $this->request->only(['id']);

        //验证空值
        $result = $this->validate($data,'Product.product_del');
        if($result!==true)
            return json(['data' => [],'code' => '201','msg' => $result]);

        //校验当前账户是否有效
        if(!is_int(self::$res_key))
            return self::$res_key;

        //校验权限
        if(!is_bool(self::$res_auth))
            return self::$res_auth;

        //遍历数组
        $id_array = explode(',',$data['id']);
        if(is_array($id_array)){
            foreach($id_array as $k=>$v){
                //删除
                $this_data = db('product')->delete($v);
            }
        }
        if($this_data!=0)
            return json(['data' => [],'code' => '200','msg' => '删除成功']);
        return json(['data' => [],'code' => '202','msg' => '删除失败']);
    }

    /**
     * 产品分类列表
     * 根据分页的页数与条数获取数据库相应的数据返回
     */
    public function listProduct(){
        $data = $this->request->only(['page','limit']);

        //验证空值
        $result = $this->validate($data,'Product.product_list');
        if($result!==true)
            return json(['data' => [],'code' => '201','msg' => $result]);

        //校验当前账户是否有效
        if(!is_int(self::$res_key))
            return self::$res_key;

        //校验权限
        if(!is_bool(self::$res_auth))
            return self::$res_auth;

        //获取数据
        $temp['status']  = '1';
        $cate_data = db('product')->where($temp)->order('id desc')->page($data['page'],$data['limit'])->select();
        if(empty($cate_data))
            return json(['data' => [],'code' => '201','msg' => '数据为空']);

        return json(['data' => $cate_data,'code' => '201','msg' => '获取成功']);
    }

}